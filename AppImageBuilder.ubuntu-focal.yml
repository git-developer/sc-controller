version: 1

script:
  - |
    set -eu

    if [ "{{APPIMAGE_SOURCE}}" != "${TARGET_APPDIR}" ]; then
      mv "{{APPIMAGE_SOURCE}}" "${TARGET_APPDIR}"
    fi

    # Manual installation of squashfs-tools is required
    # until https://github.com/AppImageCrafters/build-appimage/issues/5 is fixed
    if ! command -v mksquashfs >/dev/null; then
      apt-get update && apt-get install -y --no-install-recommends squashfs-tools
    fi

AppDir:
  app_info:
    id: org.c0rn3j.sc-controller
    name: sc-controller
    version: "{{APPIMAGE_VERSION}}"
    icon: sc-controller
    exec: usr/bin/python3
    exec_args: -c "import os, sys; os.execvp('$APPDIR/usr/bin/scc', ['$APPDIR/usr/bin/scc'] + (sys.argv[1:] if len(sys.argv) > 1 else ['gui']))" $@

  after_bundle: |
    set -eu

    # install python3-ioctl-opt manually as it is not packaged anywhere
    pip install --target "${TARGET_APPDIR}/usr/lib/python3/dist-packages/" ioctl-opt

    # appimage-builder expects .desktop file to start with appinfo-id
    desktop="$(find "${TARGET_APPDIR}/usr" -name sc-controller.desktop)"
    sed -i "s:Exec=.*:Exec=./usr/bin/scc gui:g" "${desktop}"
    ln -sr "${desktop}" "${TARGET_APPDIR}/usr/share/applications/org.c0rn3j.sc-controller.desktop"

    # appimage-builder expects utf-8 encoding when patching shebangs,
    # but pygettext3 has iso-8859-1 encoding
    find "${TARGET_APPDIR}/usr/bin" -name 'pygettext*' | while read -r file; do
      encoding="ISO-8859-1"
      if file -bi "${file}" | grep -iq "${encoding}"; then
        <"${file}" iconv -f "${encoding}" -t utf-8 -o "${file}"
        sed -i -E '1,2 s|^(\s*#.*coding[=:]\s*)([[:alnum:].-]+)|\1utf-8|g' "${file}"
      fi
    done

    # install python3-vdf manually if not available as package
    if ! apt-cache search --names-only python3-vdf | grep -q .; then
      pip install --target "${TARGET_APPDIR}/usr/lib/python3/dist-packages/" vdf
    fi

    # remove unused icons
    icons="${TARGET_APPDIR}/usr/share/icons"
    keep=$(
      # Subset of: `wget -q https://specifications.freedesktop.org/icon-naming-spec/latest -O- | sed -nE 's:.*</td></tr><tr><td>([^<]+).*:\1:p' | sort`
      printf '%s\n' index.theme close- edit- go- list- pan- window-
      grep -rhoP '"icon_name">\K[^<]+(?=<)' glade
      grep -rhoP 'icon_name *= *"\K[^"]+(?=")' scc
    )
    map_item() { echo "${1}" | while read -r item; do printf -- "${2}" "${item}"; done; }
    paths=$(find "${icons}" '(' -false $(map_item "${keep}" ' -o -name %s*') ')' -print -type l -printf '%h/%l\n' | sort | uniq)
    find "${icons}" \( -type d -empty -or -not -type d $(map_item "${paths}" ' -not -samefile %s') \) -delete
    cancel() { echo >&2 "ERROR: ${@}" && return 1; }
    if find "${icons}" -xtype l | grep .; then
      cancel 'The symlinks shown above are broken.'
    fi
    if echo "${keep}" | while read -r icon; do echo "${paths}" | grep -q "${icon}[^/]*$" || echo "${icon}"; done | grep .; then
      cancel 'The icons above are missing.'
    fi

    # Enable icon theme
    xdg_settings="${TARGET_APPDIR}/etc/xdg/gtk-3.0/settings.ini"
    if [ ! -e "${xdg_settings}" ]; then
      mkdir -p "$(dirname "${xdg_settings}")"
      theme=$(find "${icons}" -mindepth 1 -maxdepth 1 -type d -printf %f -quit)
      printf '[Settings]\ngtk-icon-theme-name = %s\n' "${theme}" >"${xdg_settings}"
    fi

    # python3-usb1 expects 'libusb-1.0.so', see https://github.com/vpelletier/python-libusb1/issues/78
    find "${TARGET_APPDIR}" -name 'libusb-1.0.so.[0-9]' | while read -r file; do
      path="$(dirname "${file}")"
      link="${file%.[0-9]}"
      [ -e "${link}" ] || ln -sr "${file}" "${link}"
    done

  apt:
    arch:
      - "{{APPIMAGE_APT_ARCH}}"

    sources:
      - sourceline: deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ {{APPIMAGE_APT_DISTRO}} main universe
        key_url: http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x{{APPIMAGE_APT_PUBKEY}}
      - sourceline: deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ {{APPIMAGE_APT_DISTRO}}-updates main universe
      - sourceline: deb [arch=amd64] http://security.ubuntu.com/ubuntu/ {{APPIMAGE_APT_DISTRO}}-security main universe
      - sourceline: deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ {{APPIMAGE_APT_DISTRO}} main universe
      - sourceline: deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ {{APPIMAGE_APT_DISTRO}}-updates main universe
      - sourceline: deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ {{APPIMAGE_APT_DISTRO}}-security main universe
      - sourceline: deb https://ppa.launchpadcontent.net/snwh/ppa/ubuntu focal main
        key_url: http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x023634F5E3DE42B7594EB77B9528DA3D98902E4B

    include:
      - gir1.2-gtk-3.0
      - gir1.2-rsvg-2.0
      - libbluetooth3
      - libgtk-3-0
      - librsvg2-common
      - python3-evdev
      - python3-gi-cairo
      - python3-libusb1
      - python3-pylibacl
      - binutils         # required for detection of bluetooth library
      - coreutils        # provides /usr/bin/env
      - paper-icon-theme # required for icons
      - shared-mime-info # required for gui if host provides no MIME info, e.g. when XDG_DATA_DIRS is missing

    exclude:
      # coreutils
      - libgmp*         # arithmetics

      # gir1.2-rsvg-2.0
      - libicu*         # i18n
      - libstdc*        # development
      - libxml*         # codec

      # libgtk3-0
      - "*-icon-theme"  # gui
      - "*crypt*"       # security
      - "*dconf*"       # gui configuration
      - "*dbus*"        # process communication
      - "*gcc*"         # development
      - "*systemd*"     # linux core
      - libblk*         # filesystem
      - libcolord*      # gui
      - libcups*        # printing
      - libepoxy*       # gui
      - libfontconfig*  # fonts
      - libfreetype*    # fonts
      - libfribidi*     # i18n
      - libgtk-3-common # gui
      - liblz*          # codec
      - libmount*       # filesystem
      - libtiff*        # codec
      - libwebp*        # codec

      # python3
      - "*krb*"         # security
      - "*readline*"    # terminal
      - "*sqlite*"      # database
      - libbz*          # codec
      - libdb*          # database
      - libmpdec*       # arithmetics
      - libncurses*     # terminal
      - libnsl*         # network
      - libssl*         # security
      - libtirpc*       # development
      - libuuid*        # development
      - media-types     # codec

      # Ubuntu Focal
      - glib-networking* # network
      - gsettings*       # gui configuration
      - libidn2*         # codec
      - libjson*         # codec
      - libsoup*         # networking
      - libunistring*    # unicode
      - mime-support     # codec

  files:
    exclude:
      - usr/bin/*gold*              # alternative for ld
      - usr/bin/*gp-display-html*   # requires perl
      - usr/lib/*/gconv             # unicode
      - usr/lib/*/gdk-pixbuf-2.0/*/loaders/libpixbufloader-??[!g]*.so # only png & svg are required
      - usr/lib/*/glib-2.0
      - usr/lib/python*/cgi.py
      - usr/lib/python*/email
      - usr/lib/python*/test
      - usr/lib/python*/unittest
      - usr/share/doc
      - usr/share/glib-2.0
      - usr/share/gtk-doc
      - usr/share/icu
      - usr/share/locale
      - usr/share/man
      - usr/share/python3/runtime.d
      - usr/share/thumbnailers

  runtime:
    env:
      # `usr/lib/python3.*/site-packages` is required in $PYTHONPATH,
      # but the python version and hence the actual location is unknown here.
      # Fortunately the site-packages directory is on the $PATH, so we add $PATH instead.
      # It must precede an existing $PYTHONPATH to work.
      PYTHONPATH: "${APPDIR}/usr/lib/python3/dist-packages:${PATH}:${PYTHONPATH}"
      SCC_SHARED: "${APPDIR}/usr/share/scc"

AppImage:
  arch: "{{APPIMAGE_ARCH}}"
  update-information: "gh-releases-zsync|C0rn3j|sc-controller|latest|sc-controller-*-{{APPIMAGE_APT_DISTRO}}-{{APPIMAGE_ARCH}}.AppImage.zsync"
